from fastapi import APIRouter, File, UploadFile, HTTPException
from insightface.app import FaceAnalysis
import cv2, numpy as np, math, os

router = APIRouter(prefix="/analyze", tags=["Analyze"])

# ======================================
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• InsightFace
# ======================================
app_insight = FaceAnalysis(name="buffalo_l", providers=["CPUExecutionProvider"])
app_insight.prepare(ctx_id=0, det_size=(640, 640))


# ======================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢
# ======================================
def estimate_yaw(face):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏° Yaw ‡∏à‡∏≤‡∏Å landmark ‡∏î‡∏ß‡∏á‡∏ï‡∏≤"""
    lmk = getattr(face, "landmark_2d_106", None)
    if lmk is None:
        return 0
    left_eye = np.mean(lmk[33:42], axis=0)
    right_eye = np.mean(lmk[42:51], axis=0)
    dx = right_eye[0] - left_eye[0]
    dy = right_eye[1] - left_eye[1]
    return -math.degrees(math.atan2(dy, dx))  # mirror fix


def analyze_skin(face_crop):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤ 6 ‡∏î‡πâ‡∏≤‡∏ô"""
    gray = cv2.cvtColor(face_crop, cv2.COLOR_BGR2GRAY)
    wrinkle = np.clip(np.std(cv2.Laplacian(gray, cv2.CV_64F)) / 80, 0, 1)

    hsv = cv2.cvtColor(face_crop, cv2.COLOR_BGR2HSV)
    redness = np.clip((np.mean(face_crop[:, :, 2]) - 110) / 80, 0, 1)

    lab = cv2.cvtColor(face_crop, cv2.COLOR_BGR2LAB)
    tone = np.clip((np.std(lab[:, :, 1]) + np.std(lab[:, :, 2])) / 40, 0, 1)

    oil = np.clip(np.mean(gray >= np.percentile(gray, 95)) * 3, 0, 1)

    h, w = face_crop.shape[:2]
    roi = face_crop[int(h * 0.25):int(h * 0.4), int(w * 0.2):int(w * 0.8)]
    eye_bag = np.clip(1 - np.mean(cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)) / 255, 0, 1)

    acne = np.clip(redness * 0.8 + oil * 0.2, 0, 1)

    return {
        "‡∏£‡∏¥‡πâ‡∏ß‡∏£‡∏≠‡∏¢": wrinkle,
        "‡∏£‡∏≠‡∏¢‡πÅ‡∏î‡∏á": redness,
        "‡∏™‡∏µ‡∏ú‡∏¥‡∏ß": tone,
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô": oil,
        "‡πÉ‡∏ï‡πâ‡∏ï‡∏≤": eye_bag,
        "‡∏™‡∏¥‡∏ß": acne,
    }


def describe_skin(name, score):
    """‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    s = score * 100
    if name == "‡∏™‡∏¥‡∏ß":
        if s < 30:
            return "‡∏ú‡∏¥‡∏ß‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ß"
        elif s < 60:
            return "‡∏°‡∏µ‡∏™‡∏¥‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏°‡∏µ‡∏™‡∏¥‡∏ß‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô"
    elif name == "‡∏£‡∏¥‡πâ‡∏ß‡∏£‡∏≠‡∏¢":
        if s < 30:
            return "‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô"
        elif s < 60:
            return "‡∏£‡∏¥‡πâ‡∏ß‡∏£‡∏≠‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏£‡∏¥‡πâ‡∏ß‡∏£‡∏≠‡∏¢‡∏ä‡∏±‡∏î ‡∏Ñ‡∏ß‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á"
    elif name == "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡∏ô":
        if s < 30:
            return "‡∏ú‡∏¥‡∏ß‡∏™‡∏°‡∏î‡∏∏‡∏•"
        elif s < 60:
            return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏±‡∏ô"
        else:
            return "‡∏ú‡∏¥‡∏ß‡∏°‡∏±‡∏ô‡∏°‡∏≤‡∏Å"
    elif name == "‡∏£‡∏≠‡∏¢‡πÅ‡∏î‡∏á":
        if s < 30:
            return "‡∏ú‡∏¥‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥"
        elif s < 60:
            return "‡∏£‡∏≠‡∏¢‡πÅ‡∏î‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏£‡∏≠‡∏¢‡πÅ‡∏î‡∏á‡∏ä‡∏±‡∏î"
    elif name == "‡∏™‡∏µ‡∏ú‡∏¥‡∏ß":
        if s < 30:
            return "‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        elif s < 60:
            return "‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        else:
            return "‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏´‡∏°‡∏≠‡∏á‡∏Ñ‡∏•‡πâ‡∏≥"
    elif name == "‡πÉ‡∏ï‡πâ‡∏ï‡∏≤":
        if s < 30:
            return "‡πÉ‡∏ï‡πâ‡∏ï‡∏≤‡∏™‡∏î‡πÉ‡∏™"
        elif s < 60:
            return "‡∏Ñ‡∏•‡πâ‡∏≥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏Ñ‡∏•‡πâ‡∏≥‡∏°‡∏≤‡∏Å"
    return "‡∏õ‡∏Å‡∏ï‡∏¥"


# ======================================
# Endpoint ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤
# ======================================
@router.post("/skin")
async def analyze_skin_api(file: UploadFile = File(...)):
    """
    üì∑ ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ ‚Üí ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏¥‡∏ß 6 ‡∏î‡πâ‡∏≤‡∏ô
    """
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û
        contents = await file.read()
        nparr = np.frombuffer(contents, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        if img is None:
            raise HTTPException(status_code=400, detail="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")

        faces = app_insight.get(img)
        if not faces:
            return {"ok": False, "message": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û"}

        # ‡πÉ‡∏ä‡πâ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        face = max(faces, key=lambda x: x.det_score)
        x1, y1, x2, y2 = map(int, face.bbox)
        face_crop = img[y1:y2, x1:x2]

        yaw, pitch, roll = face.pose
        results = analyze_skin(face_crop)
        descriptions = {k: describe_skin(k, v) for k, v in results.items()}

        summary_text = (
            "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏ú‡∏¥‡∏ß‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ "
            "‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∏‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏Ñ‡∏£‡∏µ‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏î‡∏î‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        )

        return {
            "ok": True,
            "pose": {"yaw": yaw, "pitch": pitch, "roll": roll},
            "results": results,
            "descriptions": descriptions,
            "summary": summary_text,
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    finally:
        await file.close()
